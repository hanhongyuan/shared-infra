---
# determine the status of each manager node and break them
# into two groups:
#   - swarm_manager_operational (swarm is running and active)
#   - swarm_manager_bootstrap (host needs to be joined to the cluster)
- hosts: tag_jra_environment_{{ env }}:&tag_jra_swarm_instance_type_swarm_manager
  become: true
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: create swarm_manager_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: create swarm_manager_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true

# Create the global external overlay networks
- hosts: swarm_manager_operational[0]
  become: true
  tasks:
    - name: create globalc admin proxy overlay network
      shell: >
        docker network create --driver=overlay jarch-infra-global-network-proxy-admin
      ignore_errors: yes

    - name: create globalc app-ui proxy overlay network
      shell: >
        docker network create --driver=overlay jarch-app-global-network-proxy-ui
      ignore_errors: yes

    - name: create globalc app-api proxy overlay network
      shell: >
        docker network create --driver=overlay jarch-app-global-network-proxy-api
      ignore_errors: yes


# Deploy the central logging docker swarm stack
- hosts: swarm_manager_operational[0]
  become: true
  tasks:
    - name: create the jarch-infra-global mount directory if it doesn't already exist
      shell: >
        sudo mkdir -p /usr/local/jra/scripts/compose/jarch-infra-global-stack
      ignore_errors: yes

    - name: copy the jarch-infra-global stack file
      copy:
        src: "{{ stack_file_dir }}/"
        dest: /usr/local/jra/scripts/compose/jarch-infra-global-stack/

    - name: deploy jarch-infra-global stack
      shell: >
        docker stack deploy jarch-infra-global -c {{ stack_file_name }}
      args:
        chdir: /usr/local/jra/scripts/compose/jarch-infra-global-stack/
