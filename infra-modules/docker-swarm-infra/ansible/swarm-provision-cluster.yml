---
# determine the status of each manager node and break them
# into two groups:
#   - swarm_manager_operational (swarm is running and active)
#   - swarm_manager_bootstrap (host needs to be joined to the cluster)
- hosts: tag_jra_environment_{{ env }}:&tag_jra_swarm_instance_type_swarm_manager
  become: true
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: Print manager host name
      debug: msg="manager-host-name='{{ ec2_private_dns_name }}'"

    - name: Print manager node name (with regex)
      debug: msg="manager-host-name='{{ ec2_private_dns_name | regex_replace('(ip-[0-9]*-[0-9]*-[0-9]*-[0-9]*)\.[a-zA-Z0-9]*\.[a-zA-Z0-9]*', '\\1')}}'"

    - name: create swarm_manager_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: create swarm_manager_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true

# determine the status of each worker node and break them
# into two groups:
#   - swarm_worker_operational (host is joined to the swarm cluster)
#   - swarm_worker_bootstrap (host needs to be joined to the cluster)
- hosts: tag_jra_environment_{{ env }}:&tag_jra_swarm_instance_type_swarm_worker
  become: true
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: Print worker host name
      debug: msg="worker-host-name='{{ ec2_private_dns_name }}'"

    - name: Print worker node name
      debug: msg="manager-host-name='{{ ec2_private_dns_name | regex_replace('(ip-[0-9]*-[0-9]*-[0-9]*-[0-9]*)\.[a-zA-Z0-9]*\.[a-zA-Z0-9]*', '\\1')}}'"

    - name: create swarm_worker_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: create swarm_worker_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true

# when the swarm_manager_operational group is empty, meaning there
# are no hosts running swarm, we need to initialize one of the hosts
# then add it to the swarm_manager_operational group
- hosts: swarm_manager_bootstrap[0]
  become: true
  vars:
    swarm_node_host_name: "{{ ec2_private_dns_name | regex_replace('(ip-[0-9]*-[0-9]*-[0-9]*-[0-9]*)\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*', '\\1')}}"
  tasks:
    - name: clear existing docker config file for manager leader nodes
      shell: >
       sudo rm -f /etc/systemd/system/docker.service.d/jra-docker-config.conf &&
       sudo mkdir -p /etc/systemd/system/docker.service.d

    - name: write customized docker start config file with labels for manager leader nodes
      shell: >
       sudo bash -c
       'echo "[Service]" >> /etc/systemd/system/docker.service.d/jra-docker-config.conf &&
       echo "ExecStart=" >> /etc/systemd/system/docker.service.d/jra-docker-config.conf &&
       echo "ExecStart=/usr/bin/dockerd
       -H unix:///var/run/docker.sock
       -H tcp://{{ ec2_private_ip_address }}:2375
       --experimental
       --log-driver=fluentd
       --log-opt fluentd-address=localhost:8282
       --log-opt labels=jra.swarm-node-name,jra.instance-name,jra.environment,jra.environment-size,jra.environment-type,jra.environment-instance-id,jra.failure-zone,jra.subnet-type,jra.swarm-instance-type,jra.swarm-node-type,jra.swarm-node-type,jra.environment-flip,jra.application-name,jra.container-name,jra.domain-name
       --log-opt tag='docker.\{\{.ID\}\}'
       --label jra.swarm-node-name={{ ec2_tag_Name }}
       --label jra.instance-name={{ ec2_tag_Name }}
       --label jra.environment={{ ec2_tag_jra_environment }}
       --label jra.environment-size={{ ec2_tag_jra_environment_size }}
       --label jra.environment-type={{ ec2_tag_jra_environment_type }}
       --label jra.environment-instance-id={{ ec2_tag_jra_environment_instance_id }}
       --label jra.failure-zone={{ ec2_tag_jra_failure_zone }}
       --label jra.subnet-type={{ ec2_tag_jra_subnet_type }}
       --label jra.swarm-instance-type={{ ec2_tag_jra_swarm_instance_type }}
       --label jra.swarm-node-type={{ ec2_tag_jra_swarm_node_type }}
       --label jra.swarm-node-type=swarm-leader"
       >> /etc/systemd/system/docker.service.d/jra-docker-config.conf'
      ignore_errors: yes

    - name: restart docker on manager leader nodes
      shell: >
       sudo systemctl daemon-reload &&
       sudo systemctl restart docker

    - name: initialize swarm cluster
      shell: >
        docker swarm init
        --advertise-addr={{ ec2_private_ip_address }}:2377
        --listen-addr={{ ec2_private_ip_address }}:2377
      when: "'swarm_manager_operational' not in groups"
      register: bootstrap_first_node

    - name: add labels to docker manager leader swarm node
      shell: >
        docker node update
        --label-add jra.swarm-node-name={{ ec2_tag_Name }}
        --label-add jra.instance-name={{ ec2_tag_Name }}
        --label-add jra.environment={{ ec2_tag_jra_environment }}
        --label-add jra.environment-size={{ ec2_tag_jra_environment_size }}
        --label-add jra.environment-type={{ ec2_tag_jra_environment_type }}
        --label-add jra.environment-instance-id={{ ec2_tag_jra_environment_instance_id }}
        --label-add jra.failure-zone={{ ec2_tag_jra_failure_zone }}
        --label-add jra.subnet-type={{ ec2_tag_jra_subnet_type }}
        --label-add jra.swarm-instance-type={{ ec2_tag_jra_swarm_instance_type }}
        --label-add jra.swarm-node-type={{ ec2_tag_jra_swarm_node_type }}
        --label-add jra.swarm-node-type=swarm-leader
        '{{ swarm_node_host_name }}'

    - name: add initialized host to swarm_manager_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: bootstrap_first_node | changed

# retrieve the swarm tokens and populate a list of ips listening on
# the swarm port 2377
- hosts: swarm_manager_operational[0]
  become: true
  vars:
    iface: "{{ swarm_iface | default('eth0') }}"
  tasks:
    - name: retrieve swarm manager token
      shell: docker swarm join-token -q manager
      register: swarm_manager_token

    - name: retrieve swarm worker token
      shell: docker swarm join-token -q worker
      register: swarm_worker_token

    - name: populate list of manager ips
      add_host:
        hostname: "{{ hostvars[item]['ansible_' + iface]['ipv4']['address'] }}"
        groups: swarm_manager_ips
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"

# join the manager hosts not yet initialized to the swarm cluster
- hosts: swarm_manager_bootstrap:!swarm_manager_operational
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_manager_token']['stdout'] }}"
    swarm_node_host_name: "{{ ec2_private_dns_name | regex_replace('(ip-[0-9]*-[0-9]*-[0-9]*-[0-9]*)\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*', '\\1')}}"
  tasks:
    - name: clear existing docker config file for manager follower nodes
      shell: >
       sudo rm -f /etc/systemd/system/docker.service.d/jra-docker-config.conf &&
       sudo mkdir -p /etc/systemd/system/docker.service.d

    - name: write customized docker start config file with labels for manager follower nodes
      shell: >
       sudo bash -c
       'echo "[Service]" >> /etc/systemd/system/docker.service.d/jra-docker-config.conf &&
       echo "ExecStart=" >> /etc/systemd/system/docker.service.d/jra-docker-config.conf &&
       echo "ExecStart=/usr/bin/dockerd
       -H unix:///var/run/docker.sock
       -H tcp://{{ ec2_private_ip_address }}:2375
       --experimental
       --log-driver=fluentd
       --log-opt fluentd-address=localhost:8282
       --log-opt labels=jra.swarm-node-name,jra.instance-name,jra.environment,jra.environment-size,jra.environment-type,jra.environment-instance-id,jra.failure-zone,jra.subnet-type,jra.swarm-instance-type,jra.swarm-node-type,jra.swarm-node-type,jra.environment-flip,jra.application-name,jra.container-name,jra.domain-name
       --log-opt tag='docker.\{\{.ID\}\}'
       --label jra.swarm-node-name={{ ec2_tag_Name }}
       --label jra.instance-name={{ ec2_tag_Name }}
       --label jra.environment={{ ec2_tag_jra_environment }}
       --label jra.environment-size={{ ec2_tag_jra_environment_size }}
       --label jra.environment-type={{ ec2_tag_jra_environment_type }}
       --label jra.environment-instance-id={{ ec2_tag_jra_environment_instance_id }}
       --label jra.failure-zone={{ ec2_tag_jra_failure_zone }}
       --label jra.subnet-type={{ ec2_tag_jra_subnet_type }}
       --label jra.swarm-instance-type={{ ec2_tag_jra_swarm_instance_type }}
       --label jra.swarm-node-type={{ ec2_tag_jra_swarm_node_type }}"
       >> /etc/systemd/system/docker.service.d/jra-docker-config.conf'
      ignore_errors: yes

    - name: restart docker on manager follower nodes
      shell: >
       sudo systemctl daemon-reload &&
       sudo systemctl restart docker

    - name: join manager follower nodes to cluster
      shell: >
        docker swarm join
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377

    - name: add labels to docker manager follower swarm node
      shell: >
        docker node update
        --label-add jra.swarm-node-name={{ ec2_tag_Name }}
        --label-add jra.instance-name={{ ec2_tag_Name }}
        --label-add jra.environment={{ ec2_tag_jra_environment }}
        --label-add jra.environment-size={{ ec2_tag_jra_environment_size }}
        --label-add jra.environment-type={{ ec2_tag_jra_environment_type }}
        --label-add jra.environment-instance-id={{ ec2_tag_jra_environment_instance_id }}
        --label-add jra.failure-zone={{ ec2_tag_jra_failure_zone }}
        --label-add jra.subnet-type={{ ec2_tag_jra_subnet_type }}
        --label-add jra.swarm-instance-type={{ ec2_tag_jra_swarm_instance_type }}
        --label-add jra.swarm-node-type={{ ec2_tag_jra_swarm_node_type }}
        '{{ swarm_node_host_name }}'



# join the worker hosts not yet initialized to the swarm cluster
- hosts: swarm_worker_bootstrap
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_worker_token']['stdout'] }}"
    swarm_node_host_name: "{{ ec2_private_dns_name | regex_replace('(ip-[0-9]*-[0-9]*-[0-9]*-[0-9]*)\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*', '\\1')}}"
  tasks:
    - name: clear existing docker config file for worker nodes
      shell: >
       sudo rm -f /etc/systemd/system/docker.service.d/jra-docker-config.conf &&
       sudo mkdir -p /etc/systemd/system/docker.service.d

    - name: write customized docker start config file with labels for worker nodes
      shell: >
       sudo bash -c
       'echo "[Service]" >> /etc/systemd/system/docker.service.d/jra-docker-config.conf &&
       echo "ExecStart=" >> /etc/systemd/system/docker.service.d/jra-docker-config.conf &&
       echo "ExecStart=/usr/bin/dockerd
       -H unix:///var/run/docker.sock
       -H tcp://{{ ec2_private_ip_address }}:2375
       --experimental
       --log-driver=fluentd
       --log-opt fluentd-address=localhost:8282
       --log-opt labels=jra.swarm-node-name,jra.instance-name,jra.environment,jra.environment-size,jra.environment-type,jra.environment-instance-id,jra.failure-zone,jra.subnet-type,jra.swarm-instance-type,jra.swarm-node-type,jra.swarm-node-type,jra.environment-flip,jra.application-name,jra.container-name,jra.domain-name
       --log-opt tag='docker.\{\{.ID\}\}'
       --label jra.swarm-node-name={{ ec2_tag_Name }}
       --label jra.instance-name={{ ec2_tag_Name }}
       --label jra.environment={{ ec2_tag_jra_environment }}
       --label jra.environment-size={{ ec2_tag_jra_environment_size }}
       --label jra.environment-type={{ ec2_tag_jra_environment_type }}
       --label jra.environment-instance-id={{ ec2_tag_jra_environment_instance_id }}
       --label jra.failure-zone={{ ec2_tag_jra_failure_zone }}
       --label jra.subnet-type={{ ec2_tag_jra_subnet_type }}
       --label jra.swarm-instance-type={{ ec2_tag_jra_swarm_instance_type }}
       --label jra.swarm-node-type={{ ec2_tag_jra_swarm_node_type }}"
       >> /etc/systemd/system/docker.service.d/jra-docker-config.conf'
      ignore_errors: yes

    - name: restart docker on worker nodes
      shell: >
       sudo systemctl daemon-reload &&
       sudo systemctl restart docker

    - name: join worker nodes to cluster
      shell: >
        docker swarm join
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377

    - name: add labels to docker worker swarm node
      shell: >
        docker -H {{ groups['swarm_manager_ips'][0] }}:2375 node update
        --label-add jra.swarm-node-name={{ ec2_tag_Name }}
        --label-add jra.instance-name={{ ec2_tag_Name }}
        --label-add jra.environment={{ ec2_tag_jra_environment }}
        --label-add jra.environment-size={{ ec2_tag_jra_environment_size }}
        --label-add jra.environment-type={{ ec2_tag_jra_environment_type }}
        --label-add jra.environment-instance-id={{ ec2_tag_jra_environment_instance_id }}
        --label-add jra.failure-zone={{ ec2_tag_jra_failure_zone }}
        --label-add jra.subnet-type={{ ec2_tag_jra_subnet_type }}
        --label-add jra.swarm-instance-type={{ ec2_tag_jra_swarm_instance_type }}
        --label-add jra.swarm-node-type={{ ec2_tag_jra_swarm_node_type }}
        '{{ swarm_node_host_name }}'
