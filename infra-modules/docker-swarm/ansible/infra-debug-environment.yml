---
# determine the status of each manager node and break them
# into two groups:
#   - swarm_manager_operational (swarm is running and active)
#   - swarm_manager_bootstrap (host needs to be joined to the cluster)
- hosts: tag_jra_environment_{{ env }}:&tag_jra_swarm_instance_type_swarm_manager
  become: true
  vars:
    iface: "{{ swarm_iface | default('eth0') }}"
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: determine manager leader status
      shell: >
       docker node inspect self | egrep Leader | cut -d ':' -f2 | sed -e 's/ //g' -e 's/,//g'
      register: swarm_leader_status
      ignore_errors: yes

    - name: create swarm_manager_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: create swarm_manager_leader group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_leader
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'true' in hostvars[item].swarm_leader_status.stdout_lines"
      run_once: true

    - name: populate list of manager ips
      add_host:
        hostname: "{{ hostvars[item]['ansible_' + iface]['ipv4']['address'] }}"
        groups: swarm_manager_ips
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"

# determine the status of each worker node and break them
# into two groups:
#   - swarm_worker_logging (host is joined to the swarm cluster)
#   - swarm_worker_non_logging (host needs to be joined to the cluster)
- hosts: tag_jra_environment_{{ env }}:&tag_jra_swarm_instance_type_swarm_worker
  become: true
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: create swarm_worker_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: create swarm_worker_logging
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_logging
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'infra-logging' in hostvars[item].ec2_tag_jra_swarm_node_type"
      run_once: true

    - name: create swarm_worker_non_logging group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_non_logging
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'infra-logging' not in hostvars[item].ec2_tag_jra_swarm_node_type"
      run_once: true

# when the swarm_manager_operational group is empty, meaning there
# are no hosts running swarm, we need to initialize one of the hosts
# then add it to the swarm_manager_operational group
- hosts: swarm_manager_operational:&swarm_manager_leader
  become: true
  vars:
    swarm_node_host_name: "{{ ec2_private_dns_name | regex_replace('(ip-[0-9]*-[0-9]*-[0-9]*-[0-9]*)\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*', '\\1')}}"
  tasks:
    - name: manager leader node - determine if docker config has been set up for jra apps yet (i.e. contains label 'jra')
      shell: >
        grep -silent 'jra' /etc/systemd/system/docker.service.d/jra-docker-config.conf  && echo "true" || echo "false"
      register: docker_already_conigured_for_jra

    - name: print debug for manager leader node
      debug: msg="docker_already_conigured_for_jra='{{ docker_already_conigured_for_jra.stdout_lines }}'   manager-ip:  {{ groups['swarm_manager_ips'][0] }}     node-type='{{ ec2_tag_jra_swarm_node_type }}'    name='{{ ec2_tag_Name }}'"


    - name: print debug for manager leader node
      debug: msg="MATCH HFOUND!!!!  docker_already_conigured_for_jra='{{ docker_already_conigured_for_jra.stdout_lines }}'   "
      when: "'false' in docker_already_conigured_for_jra.stdout_lines"




# when the swarm_manager_operational group is empty, meaning there
# are no hosts running swarm, we need to initialize one of the hosts
# then add it to the swarm_manager_operational group
- hosts: swarm_manager_operational:!swarm_manager_leader
  become: true
  vars:
    swarm_node_host_name: "{{ ec2_private_dns_name | regex_replace('(ip-[0-9]*-[0-9]*-[0-9]*-[0-9]*)\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*', '\\1')}}"
  tasks:
    - name: manager leader follower - determine if docker config has been set up for jra apps yet (i.e. contains label 'jra')
      shell: >
        grep -silent 'jra' /etc/systemd/system/docker.service.d/jra-docker-config.conf  && echo "true" || echo "false"
      register: docker_already_conigured_for_jra

    - name: print debug for manager leader follower
      debug: msg="docker_already_conigured_for_jra='{{ docker_already_conigured_for_jra.stdout_lines }}'   manager-ip:  {{ groups['swarm_manager_ips'][0] }}     node-type='{{ ec2_tag_jra_swarm_node_type }}'    name='{{ ec2_tag_Name }}'"


    - name: print debug for manager leader follower
      debug: msg="MATCH HFOUND!!!!  docker_already_conigured_for_jra='{{ docker_already_conigured_for_jra.stdout_lines }}'   "
      when: "'false' in docker_already_conigured_for_jra.stdout_lines"




# join the manager hosts not yet initialized to the swarm cluster
- hosts: swarm_worker_operational:&swarm_worker_logging
  become: true
  vars:
    swarm_node_host_name: "{{ ec2_private_dns_name | regex_replace('(ip-[0-9]*-[0-9]*-[0-9]*-[0-9]*)\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*', '\\1')}}"
  tasks:
    - name: worker logging node - determine if docker config has been set up for jra apps yet (i.e. contains label 'jra')
      shell: >
        grep -silent 'jra' /etc/systemd/system/docker.service.d/jra-docker-config.conf  && echo "true" || echo "false"
      register: docker_already_conigured_for_jra

    - name: print debug for worker logging node
      debug: msg="docker_already_conigured_for_jra='{{ docker_already_conigured_for_jra.stdout_lines }}'   manager-ip:  {{ groups['swarm_manager_ips'][0] }}     node-type='{{ ec2_tag_jra_swarm_node_type }}'    node-type='{{ ec2_tag_Name }}'"


    - name: print debug for worker logging node
      debug: msg="MATCH HFOUND!!!!  docker_already_conigured_for_jra='{{ docker_already_conigured_for_jra.stdout_lines }}'   "
      when: "'false' in docker_already_conigured_for_jra.stdout_lines"



# join the worker hosts not yet initialized to the swarm cluster
- hosts: swarm_worker_operational:&swarm_worker_non_logging
  become: true
  vars:
    swarm_node_host_name: "{{ ec2_private_dns_name | regex_replace('(ip-[0-9]*-[0-9]*-[0-9]*-[0-9]*)\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*', '\\1')}}"
  tasks:
    - name: worker non logging node - determine if docker config has been set up for jra apps yet (i.e. contains label 'jra')
      shell: >
        grep -silent 'jra' /etc/systemd/system/docker.service.d/jra-docker-config.conf  && echo "true" || echo "false"
      register: docker_already_conigured_for_jra

    - name: print debug for worker non logging node
      debug: msg="docker_already_conigured_for_jra='{{ docker_already_conigured_for_jra.stdout_lines }}'   manager-ip:  {{ groups['swarm_manager_ips'][0] }}     node-type='{{ ec2_tag_jra_swarm_node_type }}'    name='{{ ec2_tag_Name }}'"


    - name: print debug for worker non logging node
      debug: msg="MATCH HFOUND!!!!  docker_already_conigured_for_jra='{{ docker_already_conigured_for_jra.stdout_lines }}'   "
      when: "'false' in docker_already_conigured_for_jra.stdout_lines"
